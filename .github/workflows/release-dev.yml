name: Release

on:
  push:
    branches: 
      - 'feature/**'
      - main

env:
  TF_CLOUD_ORGANIZATION: "Imatz"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: "aws-py-service-dev"
  TF_CONFIG_DIRECTORY: "./"

jobs:
  # This workflow contains a single job called "release"
  release:
    name: Build & Deploy to AWS Container Registry
    environment: dev
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Upload Terraform Configuration
      uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      id: plan-upload
      with: 
        workspace: ${{ env.TF_WORKSPACE }}
        directory: ${{ env.TF_CONFIG_DIRECTORY }}
        speculative: true

    - name: Create Terraform Plan Run
      uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      id: plan-run
      with:
        workspace: ${{ env.TF_WORKSPACE }}
        configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
        plan_only: true

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: eu-west-1
    
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, push to ECR
      id: build-image
      env: 
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        ECR_REPO: aws-py-service
        IMAGE_TAG: ${{github.sha}}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT